"""
This file transform the SQL produced by MySQL on SQL that can execute on PostgreSQL
"""


__READ_SQL_FILE__ = "original_schema_msql.sql"

__OUTPUT_SQL_FILE__ = "02_create_schema_db_for_postgresql.sql"



code_to_add_in_top_of_file = ["""
-- delete all tables in public schema, with exception of the spatial_ref_sys
-- SOURCE: https://stackoverflow.com/questions/3327312/drop-all-tables-in-postgresql
DO $$ DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public' and tablename != 'spatial_ref_sys') LOOP
        EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
    END LOOP;
END $$;

"""]


def put_extra_code(text):
    for code in code_to_add_in_top_of_file:        
        text = code + text    

    return text


def replace_phrases(text):
    # change the schema to public
    text = text.replace("mydb", "public")
    text = text.replace("`", "")
    text = text.replace("TINYINT(1)", "BOOLEAN")
    text = text.replace("DEFAULT 0", "DEFAULT FALSE")
    text = text.replace("DEFAULT 1", "DEFAULT TRUE")
    text = text.replace("ENGINE = InnoDB", "")
    #text = text.replace("ON DELETE NO ACTION", "ON DELETE CASCADE")
    text = text.replace("ON UPDATE NO ACTION", "ON UPDATE CASCADE")

    text = text.replace("""SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;""", "")
    text = text.replace("""SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';""", "")

    text = text.replace("-- MySQL Script generated by MySQL Workbench", "")
    text = text.replace("-- Model: New Model    Version: 1.0", "")
    text = text.replace("-- MySQL Workbench Forward Engineering", "")
            
    text = text.replace(")\n;", "\n);")  # put the ) and ; together, and in other line
    #text = text.replace("'", "")
    text = text.replace("USE pauliceia ;", "")
    text = text.replace(" DEFAULT CHARACTER SET utf8", "")

    """
    # if the geometries are not in text, so replace them
    if "GEOMETRY(MULTIPOINT, 4326)" not in text:
        text = text.replace("MULTIPOINT", "GEOMETRY(MULTIPOINT, 4326)")
    if "GEOMETRY(MULTILINESTRING, 4326)" not in text:
        text = text.replace("MULTILINESTRING", "GEOMETRY(MULTILINESTRING, 4326)")
    if "GEOMETRY(MULTIPOLYGON, 4326)" not in text:
        text = text.replace("MULTIPOLYGON", "GEOMETRY(MULTIPOLYGON, 4326)")
    if "GEOMETRY(GEOMETRYCOLLECTION, 4326)" not in text:
        text = text.replace("GEOMETRYCOLLECTION", "GEOMETRY(GEOMETRYCOLLECTION, 4326)")
    """

    return text

def remove_bad_lines_and_put_default_values(text):
        
    lines = text.split("\n")
    lines_copy = list(lines)  # create a copy to iterate inside it

    # iterate reversed
    for i in range(len(lines_copy)-1, -1, -1):
        line = lines_copy[i]
        
        line_lower = line.lower()

        if "comment" in line_lower:
            comment_occurrence = lines[i].find("COMMENT")
            first_occurrence = lines[i].find("'", 0)
            second_occurrence = lines[i].find("'", first_occurrence+1)
            comment = lines[i][comment_occurrence:second_occurrence+1]
            # remove the comment
            lines[i] = lines[i].replace(comment, "")        

        # if there is a index line, so remove it in the original list
        if "index" in line_lower or ("brst" in line_lower and "2017" in line_lower):
            del lines[i]
            continue

        # put cascade in the final of line
        if ("drop schema if exists" in line_lower or "drop table if exists" in line_lower) \
            and "cascade" not in line_lower:
            lines[i] = lines[i].replace(";", "CASCADE ;")

        # put default values, but NOT in FKs
        #if "visible boolean" in line_lower and "fk" not in line_lower:
            #lines[i] = lines[i].replace(",", " DEFAULT TRUE,")

        #if "version int" in line_lower and "fk" not in line_lower:
            #lines[i] = lines[i].replace(",", " DEFAULT 1,")

        # default FALSE to "is_read" column, because is True, just if the user read the message
        #if "is_read boolean" in line_lower:
            #lines[i] = lines[i].replace(",", " DEFAULT FALSE,")

        # USER
        #if ("is_email_valid boolean" in line_lower) or ("terms_agreed boolean" in line_lower):
            #lines[i] = lines[i].replace(",", " DEFAULT FALSE,")

        if ("email text" in line_lower) or ("username text" in line_lower):
            lines[i] = lines[i].replace(",", " UNIQUE,")  # constraint UNIQUE

        #if ("is_the_admin boolean" in line_lower) or ("can_add_layer boolean" in line_lower) or ("receive_notification_by_email boolean" in line_lower):            
            #lines[i] = lines[i].replace(",", " DEFAULT FALSE,")

        # LAYER
        if "f_table_name text" in line_lower:
            lines[i] = lines[i].replace(",", " UNIQUE,")  # constraint UNIQUE

        #if "is_published boolean" in line_lower:
            #lines[i] = lines[i].replace(",", " DEFAULT FALSE,")

        # USER_LAYER
        #if "is_the_creator boolean" in line_lower:
            #lines[i] = lines[i].replace(",", " DEFAULT FALSE,")

        # REFERENCE
        # just change the 'description' of the 'reference'
        #if "reference" in lines[i-2] and "description text" in line_lower:
        #    lines[i] = lines[i].replace(",", " UNIQUE,")  # constraint UNIQUE

        # KEYWORD
        # just change the 'name' of the 'keyword'
        if "keyword" in lines[i-2] and "name text" in line_lower:
            lines[i] = lines[i].replace(",", " UNIQUE,")  # constraint UNIQUE

    text = "\n".join(lines)

    return text

def add_serial_number_in_ID(text):
    lines = text.split("\n")
    lines_copy = list(lines)  # create a copy to iterate inside it

    for i in range(0, len(lines_copy)):
        line = lines_copy[i]
        line_before = lines_copy[i-1]

        line_lower = line.lower()
        line_before_lower = line_before.lower()

        # put SERIAL just in ID field, NOT in FKs
        #if " id int" in line_lower and "fk" not in line_lower:
        if "id int" in line_lower and "create table" in line_before_lower:            
            line_splited = line.replace("NOT NULL", "").split(" ")
            line_splited[3] = "SERIAL"                
            lines[i] = " ".join(line_splited)

    text = "\n".join(lines)

    return text

def remove_example_table(text):
    lines = text.split("\n")
    lines_copy = list(lines)  # create a copy to iterate inside it

    remove_line = False

    for i in range(0, len(lines_copy)):
        line = lines_copy[i]

        line_lower = line.lower()

        # start to remove when find the "<", that means a example table, as <feature_table>
        if "<" in line_lower:
            remove_line = True

        # stop to remove the line when find );
        if ");" in line_lower and remove_line:
            # remove the line with ");"
            lines[i] = lines[i].replace(lines[i], "")  # erase the line            
            remove_line = False

        # remove the lines of the <feature_table>
        if remove_line:
            lines[i] = lines[i].replace(lines[i], "")  # erase the line

    text = "\n".join(lines)

    return text

def put_delete_cascade_in_notification_table(text):
    lines = text.split("\n")
    lines_copy = list(lines)  # create a copy to iterate inside it

    remove_line = False

    for i in range(0, len(lines_copy)):
        line = lines_copy[i]

        line_lower = line.lower()

        # start to remove when find the "foreign key (notification_id_parent)" (when it is the delete no action)
        if "foreign key (notification_id_parent)" in line_lower or "foreign key (layer_id)" in line_lower:
            remove_line = True

        # replace the line to delete cascade
        if remove_line:
            lines[i] = lines[i].replace("ON DELETE NO ACTION", "ON DELETE CASCADE")  # erase the line
            #print(lines[i])

        # stop to remove the line when find "on update cascade"
        if "on update cascade" in line_lower and remove_line:
            remove_line = False
            #print("\n\n")

    text = "\n".join(lines)

    return text

def last_modifications(text):
    text = text.replace("""
-- -----------------------------------------------------
-- Schema public
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS public CASCADE ;

-- -----------------------------------------------------
-- Schema public
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS public ;
USE public ;""", "")

    text = text.replace("\n\n\n\n", "\n")
    text = text.replace("\n\n\n\n", "\n")
    text = text.replace("\n\n\n\n", "\n")

    text = text.replace(" user ", " user_ ")

    text = text.replace("BLOB", "BYTEA")

    return text


def main():
    """
    This function replace code from MySQL generate
    by MySQL Workbench to PostgreSQL SQL
    with some modifications to Pauliceia
    """

    with open(__OUTPUT_SQL_FILE__, 'a') as file_output, open(__READ_SQL_FILE__, 'r') as file_read:
        text = file_read.read() # read everything in the file
        

        text = replace_phrases(text)

        text = put_extra_code(text)
        
        # remove bad lines     
        text = remove_bad_lines_and_put_default_values(text)

        # add SERIAL number in ID
        text = add_serial_number_in_ID(text)

        # remove the <feature_table> and version_<feature_table>
        text = remove_example_table(text)

        text = put_delete_cascade_in_notification_table(text)

        text = last_modifications(text)


        # after all modification save it in file again
        
        file_output.seek(0) # rewind (return pointer to top of file)
        file_output.truncate() # clear file
        file_output.write(text) # write the updated text before

        print("All file was changed with success!")
       
main()
